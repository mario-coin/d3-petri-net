// Generated by CoffeeScript 2.5.1
(function() {
  // -----------------------------------
  // dados iniciais
  // -----------------------------------
  var $tbody_arc, $tbody_places, $tbody_transition, add_row, build, build_delete_row, petri1, petri2, read, read_1, read_2;

  petri1 = {
    places: [
      {
        // lugares
        name: ">",
        count: 1
      },
      {
        name: "l2",
        count: 2
      },
      {
        name: "l3",
        count: 0
      },
      {
        name: "l4",
        count: 1
      },
      {
        name: "^",
        count: 0
      }
    ],
    transitions: [
      {
        // transições
        name: "t2"
      },
      {
        name: "!"
      }
    ],
    // arcos
    edges: [
      {
        source: ">",
        target: "!"
      },
      {
        source: "!",
        target: "l3"
      },
      {
        source: "!",
        target: "l2"
      },
      {
        source: "l2",
        target: "!"
      },
      {
        source: "l3",
        target: "t2"
      },
      {
        source: "l4",
        target: "t2"
      },
      {
        source: "t2",
        target: "^"
      }
    ]
  };

  petri2 = {
    places: [
      {
        // lugares
        name: ">",
        count: 2
      },
      {
        name: "l2",
        count: 0
      },
      {
        name: "l3",
        count: 2
      },
      {
        name: "l4",
        count: 0
      },
      {
        name: "l5",
        count: 5
      },
      {
        name: "l6",
        count: 0
      },
      {
        name: "l7",
        count: 0
      },
      {
        name: "^",
        count: 0
      }
    ],
    transitions: [
      {
        // transições
        name: "t2"
      },
      {
        name: "t3"
      },
      {
        name: "t4"
      },
      {
        name: "!"
      }
    ],
    // arcos
    edges: [
      {
        source: ">",
        target: "!"
      },
      {
        source: "!",
        target: "l2"
      },
      {
        source: "l2",
        target: "t2"
      },
      {
        source: "t2",
        target: "l4"
      },
      {
        source: "l4",
        target: "t3"
      },
      {
        source: "t3",
        target: "l3"
      },
      {
        source: "l3",
        target: "t2"
      },
      {
        source: "t3",
        target: "l7"
      },
      {
        source: "t3",
        target: "l6"
      },
      {
        source: "l7",
        target: "t4"
      },
      {
        source: "l6",
        target: "t4"
      },
      {
        source: "t4",
        target: "l5"
      },
      {
        source: "l5",
        target: "t2"
      },
      {
        source: "t4",
        target: "^"
      }
    ]
  };

  // -----------------------------------
  // gerar dados na tabela
  // -----------------------------------
  $tbody_places = $('#pda-places');

  $tbody_transition = $('#pda-transition');

  $tbody_arc = $('#pda-arc');

  $('#read-ex1').on('click', function(e) {
    e.preventDefault();
    return read_1();
  });

  $('#read-ex2').on('click', function(e) {
    e.preventDefault();
    return read_2();
  });

  read_1 = function() {
    return read(petri1);
  };

  read_2 = function() {
    return read(petri2);
  };

  read = function(petri) {
    // escrever na tabela lugares
    petri.places.map(function(j, i) {
      return $tbody_places.append(['<tr> <td> <input class="dyn-input" type="text" id="name" name="name" value="' + j.name + '" /> </td> <td> <input class="dyn-input" type="text" id="count" name="count" value="' + j.count + '" /> </td> <td> <button class="button tiny secondary delete-row">x</button> </td> </tr>']);
    });
    // escrever na tabela transições
    petri.transitions.map(function(j, i) {
      return $tbody_transition.append(['<tr> <td> <input class="dyn-input" type="text" id="name" name="name" value="' + j.name + '" /> </td> <td> <button class="button tiny secondary delete-row">x</button> </td> </tr>']);
    });
    // escrever na tabela arcos
    petri.edges.map(function(j, i) {
      // console.log(i, j)
      return $tbody_arc.append(['<tr> <td> <input class="dyn-input" type="text" id="source" name="source" value="' + j.source + '" /> </td> <td> <input class="dyn-input" type="text" id="target" name="target" value="' + j.target + '" /> </td> <td> <button class="button tiny secondary delete-row">x</button> </td> </tr>']);
    });
    return build_delete_row();
  };

  // -----------------------------------
  // build petri net
  // -----------------------------------
  $('#build').on('click', function(e) {
    e.preventDefault();
    return build();
  });

  build = function() {
    var $d3, $jq, AND, active, all, box_color, circs, click_color, color, dead_color, force, height, holds, incoming, json, length, links, live_color, node, outgoing, radius, rects, svg, tasks, texts, width;
    $d3 = d3;
    $jq = $; // jquery
    width = $jq("#rhs").width();
    height = $jq("#rhs").height();
    color = d3.scale.category20();
    force = d3.layout.force().charge(-250).linkDistance(45).size([width, height]);
    json = {
      nodes: [],
      edges: []
    };
    // mapear lugares
    $($tbody_places.children('tr')).map(function(j, i) {
      return json.nodes.push({
        id: j,
        name: $(i).find('#name').val(),
        group: 0,
        count: +$(i).find('#count').val()
      });
    });
    length = json.nodes.length;
    // mapear transições
    $($tbody_transition.children('tr')).map(function(j, i) {
      return json.nodes.push({
        id: length + j,
        name: $(i).find('#name').val(),
        group: 1
      });
    });
    // mapear arcos
    $($tbody_arc.children('tr')).map(function(j, i) {
      var s, t;
      s = (json.nodes.filter(function(x) {
        return $(i).find('#source').val() === x.name;
      }))[0].id;
      t = (json.nodes.filter(function(x) {
        return $(i).find('#target').val() === x.name;
      }))[0].id;
      return json.edges.push({
        source: s,
        target: t
      });
    });
    // rodar rede petri
    force.nodes(json.nodes).links(json.edges).start();
    AND = function(a, b) {
      return a && b;
    };
    all = function(xs) {
      return xs.length && xs.reduce(AND, true);
    };
    incoming = function(n) {
      var e, k, len, ref, results;
      ref = json.edges;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        e = ref[k];
        if (e.target === n) {
          results.push(e);
        }
      }
      return results;
    };
    outgoing = function(n) {
      var e, k, len, ref, results;
      ref = json.edges;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        e = ref[k];
        if (e.source === n) {
          results.push(e);
        }
      }
      return results;
    };
    active = function(n) {
      var e;
      return all((function() {
        var k, len, ref, results;
        ref = incoming(n);
        results = [];
        for (k = 0, len = ref.length; k < len; k++) {
          e = ref[k];
          results.push(e.source.count > 0);
        }
        return results;
      })());
    };
    holds = function() {
      var k, len, n, ref, results;
      ref = json.nodes;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        n = ref[k];
        if (n.group === 0) {
          results.push(n);
        }
      }
      return results;
    };
    tasks = function() {
      var k, len, n, ref, results;
      ref = json.nodes;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        n = ref[k];
        if (n.group === 1) {
          results.push(n);
        }
      }
      return results;
    };
    radius = 15;
    svg = d3.select("svg");
    links = svg.selectAll("line.link").data(json.edges).enter().append("line").attr("class", "link").style("stroke", "#000").style("stroke-width", 2);
    circs = svg.selectAll("circle.node").data(holds).enter().append("circle").attr("class", "node").attr("r", radius).style("fill", function(d) {
      if (d.name === '>') {
        return 'lime';
      } else if (d.name === '^') {
        return 'red';
      } else {
        return 'white';
      }
    }).style("stroke", '#000').style("stroke-width", '2').call(force.drag);
    dead_color = '#333';
    live_color = '#666';
    click_color = '#999';
    box_color = function(d, i) {
      if (active(d)) {
        return live_color;
      } else {
        return dead_color;
      }
    };
    texts = svg.selectAll("text").data(holds).enter().append("text").call(force.drag).text(function(d) {
      if (d.count === 0) {
        return '';
      } else {
        return d.count;
      }
    });
    rects = svg.selectAll("rect.node").data(tasks).enter().append("rect").attr("class", "node").attr("width", radius * 2).attr("height", radius * 2).style("stroke", '#000').style("stroke-width", '2').style("fill", box_color).call(force.drag).on('click', function(g, j) {
      if (active(g)) {
        return (() => {
          var e, k, l, len, len1, ref, ref1;
          ref = incoming(g);
          for (k = 0, len = ref.length; k < len; k++) {
            e = ref[k];
            e.source.count -= 1;
          }
          ref1 = outgoing(g);
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            e = ref1[l];
            e.target.count += 1;
          }
          $d3.select(this).style('fill', click_color);
          rects.transition().style('fill', box_color);
          return texts.transition().text(function(d) {
            if (d.count === 0) {
              return '';
            } else {
              return d.count;
            }
          });
        })();
      }
    });
    node = svg.selectAll(".node");
    node.append("title").text(function(d) {
      return d.name;
    });
    return force.on("tick", function() {
      texts.attr("x", function(d) {
        return d.x - 5;
      }).attr("y", function(d) {
        return d.y + 5;
      });
      links.attr("x1", function(d) {
        return d.source.x;
      }).attr("y1", function(d) {
        return d.source.y;
      }).attr("x2", function(d) {
        return d.target.x;
      }).attr("y2", function(d) {
        return d.target.y;
      });
      circs.attr("cx", function(d) {
        return d.x;
      }).attr("cy", function(d) {
        return d.y;
      });
      return rects.attr("x", function(d) {
        return d.x - radius;
      }).attr("y", function(d) {
        return d.y - radius;
      });
    });
  };

  // -----------------------------------
  // table events
  // -----------------------------------
  $('.add-row').on('click', function(e) {
    var table_body;
    e.preventDefault();
    table_body = $(e.target).data().table;
    if (table_body) {
      add_row(table_body);
      return build_delete_row();
    }
  });

  add_row = function(table_body_element) {
    var $cloner, $new_row, $rows, $tbody, count, inputs;
    // Get some variables for the tbody and the row to clone.
    $tbody = $('#' + table_body_element);
    $rows = $($tbody.children('tr'));
    $cloner = $rows.eq(0);
    count = $rows.length;
    // Clone the row and get an array of the inputs.
    $new_row = $cloner.clone();
    inputs = $new_row.find('.dyn-input');
    // Change the name and id for each input.
    $.each(inputs, function(i, v) {
      var $input, $label, checked;
      $input = $(v);
      // Find the label for input and adjust it.
      $label = $new_row.find(`label[for='${$input.attr('id')}']`);
      $label.attr({
        'for': $input.attr('id').replace(/\[.*\]/, `[${count + 1}]`)
      });
      $input.attr({
        'name': $input.attr('name').replace(/\[.*\]/, `[${count + 1}]`),
        'id': $input.attr('id').replace(/\[.*\]/, `[${count + 1}]`)
      });
      // Remove values and checks.
      $input.val('');
      checked = $input.prop('checked');
      if (checked) {
        return $input.prop('checked', false);
      }
    });
    // Add the new row to the tbody.
    return $tbody.append($new_row);
  };

  // delete table row
  build_delete_row = function() {
    return $('.delete-row').on('click', function(e) {
      e.preventDefault();
      return $(e.target).closest('tr').remove();
    });
  };

}).call(this);
